const http = require('http');
const debug = require('debug')('app:project');

const app = require('../app');
const nconf = require('../config');

app.set('port', nconf.get('PORT') || nconf.get('server:port'));

const server = http.createServer(app);
server.listen(app.get('port'));

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? `Pipe ${app.get('port')}`
    : `Port ${app.get('port')}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  console.log('Server listening on %s', bind);
  debug('Listening on %s', bind);
}

server.on('error', onError);
server.on('listening', onListening);
